--------
-- System and Version Control
--------

/** Version Control. */
create table VersionCtrl (
id bigint generated by default as identity,
description varchar(255),
version timestamp,
primary key (id)
);

/** System Control. */
create table SystemCtrl (
id bigint generated by default as identity,
description varchar(255),
version timestamp,
versionCtrl_id bigint,
primary key (id)
);

--------
-- Type Tables
--------

/** POSITION TYPE */
create table PositionType (
id bigint generated by default as identity,
active boolean not null,
businessKey varchar(255) not null,
custom boolean not null,
description varchar(255),
version timestamp,
typeLevel integer not null,
primary key (id)
);

/** UNIT-TYPE */
create table UnitType (
id bigint generated by default as identity,
active boolean not null,
businessKey varchar(255) not null,
custom boolean not null,
description varchar(255),
version timestamp,
primary key (id)
);

/** LOCATIONs */
create table Location (
id bigint generated by default as identity,
active boolean not null,
businessKey varchar(255) not null,
custom boolean not null,
description varchar(255),
version timestamp,
country varchar(255),
line1 varchar(255),
line2 varchar(255),
postcode varchar(255),
state varchar(255),
suburb varchar(255),
workStation varchar(255),
parentId bigint,
primary key (id)
);

-----------
-- MAIN Tables
-----------

/** ORG UNIT */
create table OrgUnit (
id bigint generated by default as identity,
active boolean not null,
businessKey varchar(255) not null,
custom boolean not null,
description varchar(255),
version timestamp,
type_id bigint,
primary key (id)
);

/** POSITION */
create table Position (
id bigint generated by default as identity,
active boolean not null,
businessKey varchar(255) not null,
custom boolean not null,
description varchar(255),
version timestamp,
type_id bigint,
primary key (id)
);

/** CONTACT (ie the Person) */
create table Contact (
id bigint generated by default as identity,
active boolean not null,
businessKey varchar(255) not null,
custom boolean not null,
description varchar(255),
version timestamp,
country varchar(255),
line1 varchar(255),
line2 varchar(255),
postcode varchar(255),
state varchar(255),
suburb varchar(255),
workStation varchar(255),
companyTitle varchar(255),
firstName varchar(255),
lastName varchar(255),
image_id bigint,
location_id bigint,
primary key (id)
);

/** IMAGE HOLDER */
create table Image (
id bigint generated by default as identity,
active boolean not null,
custom boolean not null,
description varchar(255),
version timestamp,
image blob,
mimeType varchar(255),
thumbNail blob,
primary key (id)
);

/** CHANNEL (ie email, mobile etc) */
create table Channel (
id bigint generated by default as identity,
active boolean not null,
custom boolean not null,
description varchar(255),
version timestamp,
channelValue varchar(255),
type varchar(255),
contact_id bigint,
primary key (id)
);

------------
-- Version Details
------------

/** OrgUnit versioned links **/
create table OrgUnitLinks (
description varchar(255),
version timestamp,
-- Version ID
versionCtrl_id bigint not null,
-- Owner OU
item_id bigint not null,
-- Parent OU
parent_item_id bigint,
parent_versionCtrl_id bigint,
-- Manager Position
managerPosition_item_id bigint,
managerPosition_versionCtrl_id bigint,
primary key (item_id, versionCtrl_id));

/** Position versioned links **/
create table PositionLinks (
description varchar(255),
version timestamp,
-- Version ID
versionCtrl_id bigint not null,
-- Owning item
item_id bigint not null,
-- Parent Position
parent_item_id bigint,
parent_versionCtrl_id bigint,
-- Owned by OU
ownerOrgUnit_item_id bigint,
ownerOrgUnit_versionCtrl_id bigint,
primary key (item_id, versionCtrl_id));

/** Contact versioned links **/
create table ContactLinks (
description varchar(255),
version timestamp,
-- Version ID
versionCtrl_id bigint not null,
-- Owning Item
item_id bigint not null,
primary key (item_id, versionCtrl_id)
);

/** Contacts and Positions Many to Many. */
create table ContactLinks_PositionLinks (
contactVersions_item_id bigint not null,
contactVersions_versionCtrl_id bigint not null,
positionVersions_item_id bigint not null,
positionVersions_versionCtrl_id bigint not null,
primary key (contactVersions_item_id, contactVersions_versionCtrl_id, positionVersions_item_id, positionVersions_versionCtrl_id)
);

-------------
-- Foreign Keys.
-------------

-- System Control Constraints
alter table SystemCtrl add constraint FK_SystemCtrl_to_VersionCtrl foreign key (versionCtrl_id) references VersionCtrl;
-- Limit to one system control record
alter table SystemCtrl add constraint CHECK_SystemCtrl_ID check(id = 1);
-- Location
alter table Location add constraint FK_Location_to_Location foreign key (parentId) references Location;
-- OrgUnit
alter table OrgUnit add constraint FK_OrgUnit_to_UnitType foreign key (type_id) references UnitType;
-- Position
alter table Position add constraint FK_Position_to_PositionType foreign key (type_id) references PositionType;
-- Contact
alter table Contact add constraint FK_Contact_to_Location foreign key (location_id) references Location;
alter table Contact add constraint FK_Contact_to_Image foreign key (image_id) references Image;
-- Channel
alter table Channel add constraint FK_Channel_to_Contact foreign key (contact_id) references Contact;
-- Version Owners (ie item_id)
alter table OrgUnitLinks  add constraint FK_OrgUnitLinks_to_OrgUnit foreign key (item_id) references OrgUnit;
alter table PositionLinks add constraint FK_PositionLinks_to_Position foreign key (item_id) references Position;
alter table ContactLinks  add constraint FK_ContactLinks_to_Contact foreign key (item_id) references Contact;
-- Version Ctrl
alter table OrgUnitLinks  add constraint FK_OrgUnitLinks_to_VersionCtrl foreign key (versionCtrl_id) references VersionCtrl;
alter table PositionLinks add constraint FK_PositionLinks_to_VersionCtrl foreign key (versionCtrl_id) references VersionCtrl;
alter table ContactLinks  add constraint FK_ContactLinks_to_VersionCtrl foreign key (versionCtrl_id) references VersionCtrl;
-- Org Tree
alter table OrgUnitLinks  add constraint FK_OrgUnitLinks_to_OrgUnitLinks foreign key (parent_item_id, parent_versionCtrl_id) references OrgUnitLinks;
-- Position Tree
alter table PositionLinks add constraint FK_PositionLinks_to_PositionLinks foreign key (parent_item_id, parent_versionCtrl_id) references PositionLinks;
-- Org Units Managed by a Position
alter table OrgUnitLinks  add constraint FK_OrgUnitLinks_to_PositionLinks foreign key (managerPosition_item_id, managerPosition_versionCtrl_id) references PositionLinks;
-- Positions owned by an Org Unit
alter table PositionLinks add constraint FK_PositionLinks_to_OrgUnitlinks foreign key (ownerOrgUnit_item_id, ownerOrgUnit_versionCtrl_id) references OrgUnitLinks;
-- Contacts assigned to a Position (Many to Many)
alter table ContactLinks_PositionLinks add constraint FK_PositionLinks_ContactLinks_to_ContactLinks foreign key (contactVersions_item_id, contactVersions_versionCtrl_id) references ContactLinks;
alter table ContactLinks_PositionLinks add constraint FK_PositionLinks_ContactLinks_to_PositionLinks foreign key (positionVersions_item_id, positionVersions_versionCtrl_id) references PositionLinks;

/** Business Keys*/
alter table PositionType add constraint UK_PositionType_Business_Key unique (businessKey);
alter table Position add constraint UK_Position_Business_Key unique (businessKey);
alter table OrgUnit add constraint UK_OrgUnit_Business_Key unique (businessKey);
alter table Location add constraint UK_Location_Business_Key unique (businessKey);
alter table Contact add constraint UK_Contact_Business_Key unique (businessKey);
alter table UnitType add constraint UK_UnitType_Business_Key unique (businessKey);
